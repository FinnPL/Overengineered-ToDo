services:
  certgen:
    image: cockroachdb/cockroach:v24.2.0
    entrypoint: []
    command:
      - /bin/bash
      - -ec
      - |
        if [ ! -f /certs/ca.crt ]; then
          cockroach cert create-ca --certs-dir=/certs --ca-key=/certs/ca.key
          cockroach cert create-node cockroach localhost 127.0.0.1 --certs-dir=/certs --ca-key=/certs/ca.key
          cockroach cert create-client root --certs-dir=/certs --ca-key=/certs/ca.key
          chmod 600 /certs/client.root.key
          chown -R 1000:1000 /certs
        else
          echo "certificates already exist, skipping generation"
        fi
    volumes:
      - cockroach-certs:/certs
    restart: "no"

  cockroach:
    image: cockroachdb/cockroach:v24.2.0
    entrypoint: ["/cockroach/cockroach"]
    depends_on:
      certgen:
        condition: service_completed_successfully
    command:
      - start-single-node
      - --store=attrs=ssd,path=/cockroach/cockroach-data
      - --certs-dir=/cockroach/certs
      - --listen-addr=127.0.0.1:26258
      - --advertise-addr=cockroach:26258
      - --sql-addr=0.0.0.0:26257
      - --advertise-sql-addr=cockroach:26257
      - --http-addr=0.0.0.0:8080
    ports:
      - "26257:26257"
      - "8080:8080"
    volumes:
      - cockroach-data:/cockroach/cockroach-data
      - cockroach-certs:/cockroach/certs:ro
    healthcheck:
      test: ["CMD", "curl", "--silent", "--fail", "--cacert", "/cockroach/certs/ca.crt", "https://127.0.0.1:8080/health?ready=1"]
      interval: 5s
      timeout: 5s
      start_period: 20s
      retries: 12

  migrator:
    image: cockroachdb/cockroach:v24.2.0
    depends_on:
      cockroach:
        condition: service_healthy
    volumes:
      - ./api/migrations:/migrations:ro
      - cockroach-certs:/certs:ro
    entrypoint: []
    command:
      - /bin/bash
      - -ec
      - |
        set -euo pipefail
        cockroach sql --certs-dir=/certs --host=cockroach --execute "CREATE DATABASE IF NOT EXISTS todoapp;"
        for file in /migrations/*.sql; do
          clean_file=$(printf "%s" "$$file" | tr -d '\r')
          echo "applying $$clean_file"
          cockroach sql --certs-dir=/certs --host=cockroach --database=todoapp --file="$$clean_file"
        done
    restart: "no"

  userservice:
    build:
      context: ./api
      dockerfile: cmd/userservice/Dockerfile
    environment:
      DATABASE_URL: postgresql://root@cockroach:26257/todoapp?sslmode=verify-full&sslrootcert=/app/certs/ca.crt&sslcert=/app/certs/client.root.crt&sslkey=/app/certs/client.root.key
      PORT: "8080"
    depends_on:
      migrator:
        condition: service_completed_successfully
    ports:
      - "8082:8080"
    volumes:
      - cockroach-certs:/app/certs:ro

  todoservice:
    build:
      context: ./api
      dockerfile: cmd/todoservice/Dockerfile
    environment:
      DATABASE_URL: postgresql://root@cockroach:26257/todoapp?sslmode=verify-full&sslrootcert=/app/certs/ca.crt&sslcert=/app/certs/client.root.crt&sslkey=/app/certs/client.root.key
      PORT: "8081"
    depends_on:
      migrator:
        condition: service_completed_successfully
    ports:
      - "8083:8081"
    volumes:
      - cockroach-certs:/app/certs:ro

volumes:
  cockroach-data:
  cockroach-certs:
